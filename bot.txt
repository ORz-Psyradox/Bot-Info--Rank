import os
import discord
from discord.ext import commands, tasks
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import Error
import asyncio
import time
from contextlib import contextmanager
import shutil

# Load sensitive information from .env
load_dotenv()
TOKEN1 = os.getenv("DISCORD_TOKEN1")
TOKEN2 = os.getenv("DISCORD_TOKEN2")
YOUR_DISCORD_ID = int(os.getenv("YOUR_DISCORD_ID"))
GUILD_ID = int(os.getenv("GUILD_ID"))

# Load channel IDs from .env
TOP3_CHANNEL_ID = int(os.getenv("TOP3_CHANNEL_ID"))
TOP10_CHANNEL_ID = int(os.getenv("TOP10_CHANNEL_ID"))

DB_CONFIG = {
    "host": "191.96.229.15",  # כתובת השרת שלך (לדוגמה: localhost או כתובת IP)
    "user": "u1_9TO8L1QmCN",  # שם המשתמש שלך
    "password": "K=+FRwP6CuoI+eh@PP4F5XTD",  # סיסמת המשתמש
    "database": "s1_s87_Itay",  # שם בסיס הנתונים שלך
    "connection_timeout": 30  # זמן התחברות
}

# Helper function to connect to the database with retry mechanism
def get_database_connection(retries=3, delay=5):
    for attempt in range(retries):
        try:
            print(f"Trying to connect to the database... (Attempt {attempt + 1})")
            connection = mysql.connector.connect(**DB_CONFIG)
            print("Successfully connected to the database!")
            return connection
        except Error as e:
            print(f"Error connecting to database (Attempt {attempt + 1}): {e}")
            if attempt < retries - 1:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                print(f"Failed to connect to database after {retries} attempts.")
                return None

# Context manager for database cursor
@contextmanager
def database_cursor():
    print("Trying to get database connection...")
    connection = get_database_connection()
    if connection is None:
        print("Failed to get connection!")
        yield None
    else:
        print("Connection successful, getting cursor...")
        cursor = connection.cursor(dictionary=True)
        try:
            yield cursor
        finally:
            print("Closing cursor and connection...")
            cursor.close()
            connection.close()

# Fetch player data
def fetch_player_data(identifier):
    print(f"Fetching data for identifier: {identifier}")
    
    # חיפוש לפי Steam ID או שם
    query = """SELECT name, steamid, exp, exp2, exp3 FROM todayinfo WHERE steamid = %s OR name = %s"""
    
    with database_cursor() as cursor:
        if cursor:
            print(f"Executing query: {query} with identifier {identifier}")
            cursor.execute(query, (identifier, identifier))
            result = cursor.fetchone()
            print(f"Query result: {result}")
            return result
    
    print("No data fetched")
    return None

# Fetch top players data
def fetch_top_players(limit):
    print(f"Fetching top {limit} players")
    query = "SELECT name, kills, deaths, hs FROM csstatsx2 ORDER BY kills DESC LIMIT %s"
    with database_cursor() as cursor:
        if cursor:
            cursor.execute(query, (limit,))
            return cursor.fetchall()
    return []

# Generate player embed
def generate_top_embed(title, players, emoji):
    embed = discord.Embed(title=title, color=discord.Color.blue())
    for player in players:
        embed.add_field(
            name=f"{emoji} {player['name']}",
            value=(f"**Kills:** {player['kills']} | "
                   f"**Deaths:** {player['deaths']} | "
                   f"**Headshots:** {player['hs']}"),
            inline=False
        )
    return embed

# Bot 1 configuration
intents1 = discord.Intents.default()
bot1 = commands.Bot(command_prefix='!', intents=intents1)

top3_message = None
top10_message = None

@bot1.event
async def on_ready():
    print(f'Bot 1 Logged in as {bot1.user}')
    try:
        print("Starting top players update task...")
        update_top_players.start()  # Start the periodic task
    except Exception as e:
        print(f"Error starting top players update task: {e}")

@tasks.loop(minutes=5)
async def update_top_players():
    global top3_message, top10_message
    try:
        print("Fetching top 3 players...")
        top3_channel = bot1.get_channel(TOP3_CHANNEL_ID)
        top3_players = fetch_top_players(3)
        top3_embed = generate_top_embed("שלושת השחקנים הטובים ביותר", top3_players, "🥇")

        if top3_message is None:
            print("Sending top 3 message...")
            top3_message = await top3_channel.send(embed=top3_embed)
        else:
            print("Editing top 3 message...")
            await top3_message.edit(embed=top3_embed)

        print("Fetching top 10 players...")
        top10_channel = bot1.get_channel(TOP10_CHANNEL_ID)
        top10_players = fetch_top_players(10)
        top10_embed = generate_top_embed("עשרת השחקנים הטובים ביותר", top10_players, "🏅")

        if top10_message is None:
            print("Sending top 10 message...")
            top10_message = await top10_channel.send(embed=top10_embed)
        else:
            print("Editing top 10 message...")
            await top10_message.edit(embed=top10_embed)
    except Exception as e:
        print(f"Error in updating top players: {e}")

@bot1.command()
async def top3(ctx):
    if ctx.channel.id != TOP3_CHANNEL_ID:
        await ctx.send("❌ הפקודה הזו זמינה רק בערוץ המיועד.")
        return

    top3_players = fetch_top_players(3)
    embed = generate_top_embed("שלושת השחקנים הטובים ביותר", top3_players, "🥇")
    await ctx.send(embed=embed)

@bot1.command()
async def top10(ctx):
    if ctx.channel.id != TOP10_CHANNEL_ID:
        await ctx.send("❌ הפקודה הזו זמינה רק בערוץ המיועד.")
        return

    top10_players = fetch_top_players(10)
    embed = generate_top_embed("עשרת השחקנים הטובים ביותר", top10_players, "🏅")
    await ctx.send(embed=embed)

# Bot 2 configuration
intents2 = discord.Intents.default()
bot2 = commands.Bot(command_prefix="?", intents=intents2)

@bot2.event
async def on_ready():
    print(f'Bot 2 Logged in as {bot2.user}')
    try:
        print("Synchronizing slash commands for Bot 2...")
        await bot2.tree.sync()  # Sync slash commands when bot is ready
        print("Slash commands synced for Bot 2")
    except Exception as e:
        print(f"Error syncing slash commands: {e}")

@bot2.tree.command(name="info", description="Get player stats by Steam ID or name")
async def info(interaction: discord.Interaction, identifier: str):
    print(f"Received request for player: {identifier}")
    
    # בדוק אם המידע קיים
    player = fetch_player_data(identifier)
    
    if player:
        embed = discord.Embed(title=f"Player Info: {player['name']}", color=discord.Color.blue())
        embed.add_field(name="🔑 Steam ID", value=player['steamid'], inline=True)
        embed.add_field(name="🔫 Kills", value=player['exp'], inline=True)
        embed.add_field(name="🏆 Mvps", value=player['exp2'], inline=True)
        embed.add_field(name="📊 Total Games", value=player['exp3'], inline=True)
        await interaction.response.send_message(embed=embed)
        print(f"Sent player data for: {identifier}")
    else:
        await interaction.response.send_message(
            f"❌ לא הצלחנו למצוא את השחקן `{identifier}`. אנא וודא שהמזהה או השם נכון.",
            ephemeral=True
        )
        print(f"Failed to find player: {identifier} in the database.")

@bot2.tree.command(name="test", description="Testing if the bot is working correctly")
async def test(interaction: discord.Interaction):
    await interaction.response.send_message("Bot is working fine!")

@bot2.tree.command(name="rank", description="לראות את ראנק השחקן על פי כמות הריגות")
async def rank(interaction: discord.Interaction, identifier: str):
    print(f"Fetching rank for player: {identifier}")
    player = fetch_player_data(identifier)
    if player:
        rank = player['exp']# - player['exp2']  # Calculating rank (as an example)
        color = discord.Color.green() if rank > 0 else discord.Color.red()
        embed = discord.Embed(title=f"Player Rank: {player['name']}", color=color)
        embed.add_field(name="🏆 Rank", value=rank, inline=True)
        await interaction.response.send_message(embed=embed)
    else:
        await interaction.response.send_message(
            f"❌ לא הצלחנו למצוא את השחקן `{identifier}`. אנא וודא שהמזהה או השם נכון.",
            ephemeral=True
        )

# Main entry point
async def main():
    try:
        print("Starting both bots...")
        await asyncio.gather(
            bot1.start(TOKEN1),
            bot2.start(TOKEN2)
        )
    except Exception as e:
        print(f"An error occurred while starting bots: {e}")

# Run the main function
asyncio.run(main())